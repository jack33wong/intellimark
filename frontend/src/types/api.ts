/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/mark-homework": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark homework with AI
         * @description Process uploaded image and generate marking instructions
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MarkHomeworkRequest"];
                };
            };
            responses: {
                /** @description Successful marking response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkHomeworkResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send chat message
         * @description Send a text message and get AI response
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatRequest"];
                };
            };
            responses: {
                /** @description Successful chat response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DetectedQuestion: {
            found: boolean;
            questionText?: string;
            questionNumber?: string;
            subQuestionNumber?: string;
            examBoard?: string;
            examCode?: string;
            paperTitle?: string;
            subject?: string;
            tier?: string;
            year?: string;
            marks?: number;
            markingScheme?: string;
        };
        UnifiedMessage: {
            id: string;
            messageId: string;
            sessionId?: string;
            userId?: string;
            /** @enum {string} */
            role: "user" | "assistant" | "system";
            content: string;
            timestamp: string;
            /** @enum {string} */
            type?: "chat" | "marking_original" | "marking_annotated" | "question_original" | "question_response" | "follow_up";
            imageLink?: string;
            imageData?: string;
            fileName?: string;
            isImageContext?: boolean;
            isProcessing?: boolean;
            detectedQuestion?: components["schemas"]["DetectedQuestion"];
            processingStats?: components["schemas"]["ProcessingStats"];
            progressData?: components["schemas"]["ProgressData"];
            suggestedFollowUps?: (string | {
                text?: string;
                mode?: string;
            })[];
            createdAt?: string;
            updatedAt?: string;
        };
        UnifiedSession: {
            id: string;
            title: string;
            messages: components["schemas"]["UnifiedMessage"][];
            userId: string;
            /** @enum {string} */
            messageType: "Marking" | "Question" | "Chat" | "Mixed";
            createdAt: string;
            updatedAt: string;
            favorite?: boolean;
            rating?: number;
            isPastPaper?: boolean;
            detectedQuestion?: components["schemas"]["DetectedQuestion"];
            sessionStats?: components["schemas"]["SessionStats"];
        };
        ProcessingStats: {
            processingTimeMs?: number;
            confidence?: number;
            annotations?: number;
            imageSize?: number;
            ocrMethod?: string;
            classificationResult?: Record<string, never>;
            modelUsed?: string;
            apiUsed?: string;
            llmTokens?: number;
            mathpixCalls?: number;
        };
        ProgressData: {
            currentStepDescription: string;
            allSteps: string[];
            currentStepIndex: number;
            isComplete: boolean;
        };
        SessionStats: {
            totalProcessingTimeMs?: number;
            totalLlmTokens?: number;
            totalMathpixCalls?: number;
            totalMessages?: number;
            totalTokens?: number;
            imageSize?: number;
            averageConfidence?: number;
            totalAnnotations?: number;
            lastApiUsed?: string;
            lastModelUsed?: string;
        };
        MarkHomeworkRequest: {
            imageData: string;
            /** @enum {string} */
            model: "auto" | "gemini-2.5-pro" | "gemini-2.5-flash";
            additionalInstructions?: string;
        };
        MarkHomeworkResponse: {
            success: boolean;
            isQuestionOnly?: boolean;
            annotatedImage?: string;
            message?: string;
            suggestedFollowUps?: (string | {
                text?: string;
                mode?: string;
            })[];
            apiUsed?: string;
            ocrMethod?: string;
            classification?: Record<string, never>;
            questionDetection?: Record<string, never>;
            sessionId?: string;
            sessionTitle?: string;
            isPastPaper?: boolean;
            processingStats?: components["schemas"]["ProcessingStats"];
        };
        ChatRequest: {
            message: string;
            /** @enum {string} */
            model: "auto" | "gemini-2.5-pro" | "gemini-2.5-flash";
            imageData?: string;
            sessionId?: string;
            /** @enum {string} */
            mode?: "marking" | "question" | "chat";
        };
        ChatResponse: {
            success: boolean;
            message?: Record<string, never>;
            error?: string;
        };
        ErrorResponse: {
            success: boolean;
            error: string;
            code?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
