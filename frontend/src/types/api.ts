/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/marking/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload homework image
         * @description Upload an image for homework marking
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        imageData: string;
                        /** @enum {string} */
                        model?: "auto" | "gemini-2.5-pro" | "gemini-2.5-flash";
                        sessionId?: string;
                    };
                };
            };
            responses: {
                /** @description Upload successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Image uploaded successfully */
                            message?: string;
                            /** @example session-1234567890 */
                            sessionId?: string;
                            /** @example https://firebasestorage.googleapis.com/v0/b/example.appspot.com/o/images%2Fuploaded.png */
                            imageUrl?: string;
                        };
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marking/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process homework marking
         * @description Process uploaded image and generate marking instructions
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MarkHomeworkRequest"];
                };
            };
            responses: {
                /** @description Successful marking response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkHomeworkResponse"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marking/process-single-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process homework with streaming
         * @description Process homework with real-time streaming response
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        imageData: string;
                        model?: string;
                        customText?: string;
                        debug?: boolean;
                        aiMessageId?: string;
                        sessionId?: string;
                    };
                };
            };
            responses: {
                /** @description Streaming response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example streaming */
                            responseType?: string;
                            /** @example session-1234567890 */
                            sessionId?: string;
                            /** @example msg-1234567890 */
                            messageId?: string;
                            progressData?: components["schemas"]["ProgressData"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marking/model-answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get model answer
         * @description Get model answer for a specific question
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        messageId: string;
                        sessionId: string;
                    };
                };
            };
            responses: {
                /** @description Model answer response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example model_answer */
                            responseType?: string;
                            aiMessage?: components["schemas"]["UnifiedMessage"];
                            /** @example session-1234567890 */
                            sessionId?: string;
                            progressData?: components["schemas"]["ProgressData"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marking/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get marking statistics
         * @description Get statistics about homework marking
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Marking statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            stats?: {
                                /** @example 150 */
                                totalMarkings?: number;
                                /** @example 2500 */
                                averageProcessingTime?: number;
                                /** @example 0.95 */
                                successRate?: number;
                                /** @example 75 */
                                totalSessions?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marking/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Mark homework health check
         * @description Health check for mark homework service
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example OK */
                            status?: string;
                            /** @example 2024-01-01T00:00:00Z */
                            timestamp?: string;
                            /** @example marking */
                            service?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send chat message
         * @description Send a text message and get AI response
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatRequest"];
                };
            };
            responses: {
                /** @description Successful chat response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create message
         * @description Create a new message
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UnifiedMessage"];
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/session/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update session
         * @description Update a specific session
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UnifiedSession"];
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        post?: never;
        /**
         * Delete session
         * @description Delete a specific session
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/sessions/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user sessions
         * @description Get all sessions for a specific user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User sessions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            sessions?: components["schemas"]["UnifiedSession"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create multiple messages
         * @description Create multiple messages in batch
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        messages: components["schemas"]["UnifiedMessage"][];
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get message statistics
         * @description Get statistics about messages
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/test-updated-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test auth code
         * @description Test endpoint for updated auth code
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auth providers
         * @description Get available authentication providers
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/social-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Social login
         * @description Authenticate with social provider
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        idToken: string;
                        provider: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Get current user profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            user?: {
                                /** @example user-1234567890 */
                                uid?: string;
                                /** @example user@example.com */
                                email?: string;
                                /** @example John Doe */
                                displayName?: string;
                                /** @example https://example.com/photo.jpg */
                                photoURL?: string;
                            };
                        };
                    };
                };
            };
        };
        /**
         * Update user profile
         * @description Update current user profile
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        displayName?: string;
                        photoURL?: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Email signup
         * @description Sign up with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        email: string;
                        password: string;
                        fullName: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Email signin
         * @description Sign in with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/check-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check if user exists
         * @description Check if a user exists by email
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        email: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Logout current user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment config
         * @description Get Stripe payment configuration
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/create-checkout-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create checkout session
         * @description Create Stripe checkout session
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        planId: string;
                        billingCycle: string;
                        successUrl: string;
                        cancelUrl: string;
                        userId: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/create-payment-intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create payment intent
         * @description Create Stripe payment intent
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        planId: string;
                        billingCycle: string;
                        customerEmail: string;
                        customerId: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/create-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create subscription
         * @description Create Stripe subscription
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        planId: string;
                        billingCycle: string;
                        customerEmail: string;
                        customerId: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/user-subscription/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user subscription
         * @description Get subscription for a specific user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/subscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscription by ID
         * @description Get subscription by Stripe subscription ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/cancel-subscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel subscription
         * @description Cancel a subscription
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/create-subscription-after-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create subscription after payment
         * @description Create subscription after successful payment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        sessionId: string;
                        userId: string;
                        email: string;
                    };
                };
            };
            responses: {
                /** @description Subscription created after payment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example sub_1234567890 */
                            subscriptionId?: string;
                            /** @example active */
                            status?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stripe webhook
         * @description Handle Stripe webhook events
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook processed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success?: boolean;
                            /** @example Webhook processed successfully */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/json/collections/{collectionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get collection data
         * @description Get data from a specific collection
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        put?: never;
        /**
         * Add to collection
         * @description Add data to a specific collection
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/json/collections/markingSchemes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add marking scheme
         * @description Add a new marking scheme
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        markingSchemeData: Record<string, never>;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/json/collections/{collectionName}/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete collection entry
         * @description Delete a specific entry from collection
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionName: string;
                    entryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/json/collections/{collectionName}/clear-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear collection
         * @description Clear all entries from a collection
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    collectionName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/json/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload JSON data
         * @description Upload JSON data to collections
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        data: Record<string, never>;
                    };
                };
            };
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/clear-all-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear all sessions
         * @description Clear all user sessions
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/clear-all-marking-results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear all marking results
         * @description Clear all marking results
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DetectedQuestion: {
            found: boolean;
            questionText?: string;
            questionNumber?: string;
            subQuestionNumber?: string;
            examBoard?: string;
            examCode?: string;
            paperTitle?: string;
            subject?: string;
            tier?: string;
            year?: string;
            marks?: number;
            markingScheme?: string;
        };
        UnifiedMessage: {
            id: string;
            messageId: string;
            sessionId?: string;
            userId?: string;
            /** @enum {string} */
            role: "user" | "assistant" | "system";
            content: string;
            timestamp: string;
            /** @enum {string} */
            type?: "chat" | "marking_original" | "marking_annotated" | "question_original" | "question_response" | "follow_up";
            imageLink?: string;
            imageData?: string;
            imageDataArray?: string[];
            fileName?: string;
            isImageContext?: boolean;
            isProcessing?: boolean;
            detectedQuestion?: components["schemas"]["DetectedQuestion"];
            studentScore?: {
                totalMarks?: number;
                awardedMarks?: number;
                scoreText?: string;
            };
            processingStats?: components["schemas"]["ProcessingStats"];
            progressData?: components["schemas"]["ProgressData"];
            suggestedFollowUps?: (string | {
                text?: string;
                mode?: string;
            })[];
            createdAt?: string;
            updatedAt?: string;
        };
        UnifiedSession: {
            id: string;
            title: string;
            messages: components["schemas"]["UnifiedMessage"][];
            userId: string;
            /** @enum {string} */
            messageType: "Marking" | "Question" | "Chat" | "Mixed";
            createdAt: string;
            updatedAt: string;
            favorite?: boolean;
            rating?: number;
            isPastPaper?: boolean;
            detectedQuestion?: components["schemas"]["DetectedQuestion"];
            sessionStats?: components["schemas"]["SessionStats"];
        };
        ProcessingStats: {
            processingTimeMs?: number;
            confidence?: number;
            annotations?: number;
            imageSize?: number;
            ocrMethod?: string;
            classificationResult?: Record<string, never>;
            modelUsed?: string;
            apiUsed?: string;
            llmTokens?: number;
            mathpixCalls?: number;
        };
        ProgressData: {
            currentStepDescription: string;
            allSteps: string[];
            currentStepIndex: number;
            isComplete: boolean;
        };
        SessionStats: {
            totalProcessingTimeMs?: number;
            totalLlmTokens?: number;
            totalMathpixCalls?: number;
            totalMessages?: number;
            totalTokens?: number;
            imageSize?: number;
            averageConfidence?: number;
            totalAnnotations?: number;
            lastApiUsed?: string;
            lastModelUsed?: string;
        };
        MarkHomeworkRequest: {
            imageData: string;
            /** @enum {string} */
            model: "auto" | "gemini-2.5-pro" | "gemini-2.5-flash";
            additionalInstructions?: string;
        };
        MarkHomeworkResponse: {
            success: boolean;
            isQuestionOnly?: boolean;
            annotatedImage?: string;
            message?: string;
            suggestedFollowUps?: (string | {
                text?: string;
                mode?: string;
            })[];
            apiUsed?: string;
            ocrMethod?: string;
            classification?: Record<string, never>;
            questionDetection?: Record<string, never>;
            sessionId?: string;
            sessionTitle?: string;
            isPastPaper?: boolean;
            processingStats?: components["schemas"]["ProcessingStats"];
        };
        ChatRequest: {
            message: string;
            /** @enum {string} */
            model: "auto" | "gemini-2.5-pro" | "gemini-2.5-flash";
            imageData?: string;
            sessionId?: string;
            /** @enum {string} */
            mode?: "marking" | "question" | "chat";
        };
        ChatResponse: {
            success: boolean;
            message?: Record<string, never>;
            error?: string;
        };
        ErrorResponse: {
            success: boolean;
            error: string;
            code?: string;
        };
    };
    responses: {
        /** @description Successful response */
        SuccessResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    success?: boolean;
                };
            };
        };
        /** @description Error response */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
